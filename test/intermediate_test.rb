require "test_helper"

class IntermediateTest < Minitest::Spec
  Right = Class.new # Trailblazer::Activity::Right
  Left = Class.new # Trailblazer::Activity::Right
  PassFast = Class.new # Trailblazer::Activity::Right

  it "compiles {Schema} from intermediate and implementation, with two ends" do
    skip # till Dev::Introspect is available
    # generated by the editor or a specific DSL.
    # TODO: unique {id}
    # Intermediate shall not contain actual object references, since it might be generated.
    intermediate = Inter.new(
      {
        Inter::TaskRef(:a) => [Inter::Out(:success, :b), Inter::Out(:failure, :c)],
        Inter::TaskRef(:b) => [Inter::Out(:success, :d), Inter::Out(:failure, :c)],
        Inter::TaskRef(:c) => [Inter::Out(:success, "End.failure"), Inter::Out(:failure, "End.failure")],
        Inter::TaskRef(:d) => [Inter::Out(:success, "End.success"), Inter::Out(:failure, "End.success")],
        Inter::TaskRef("End.success", stop_event: true) => [Inter::Out(:success, nil)], # this is how the End semantic is defined.
        Inter::TaskRef("End.failure", stop_event: true) => [Inter::Out(:failure, nil)]
      },
      ["End.success", "End.failure"],
      [:a]
    ) # start

    Config = Trailblazer::Activity::State::Config
    a_extension_1 = ->(config:, **) { Config.set(config, :a1, true)  }
    a_extension_2 = ->(config:, **) { Config.set(config, :a2, :yo)   }
    b_extension_1 = ->(config:, **) { Config.set(config, :b1, false) }

    implementation = {
      :a => Schema::Implementation::Task(implementing.method(:a), [Activity::Output(Right,       :success), Activity::Output(Left, :failure)],        [a_extension_1, a_extension_2]),
      :b => Schema::Implementation::Task(implementing.method(:b), [Activity::Output("B/success", :success), Activity::Output("B/failure", :failure)], [b_extension_1]),
      :c => Schema::Implementation::Task(implementing.method(:c), [Activity::Output(Right,       :success), Activity::Output(Left, :failure)]),
      :d => Schema::Implementation::Task(implementing.method(:d), [Activity::Output("D/success", :success), Activity::Output(Left, :failure)]),
      "End.success" => Schema::Implementation::Task(implementing::Success, [Activity::Output(implementing::Success, :success)]), # DISCUSS: End has one Output, signal is itself?
      "End.failure" => Schema::Implementation::Task(implementing::Failure, [Activity::Output(implementing::Failure, :failure)])
    }

    schema = Inter.(intermediate, implementation)

    cct = Trailblazer::Developer::Render::Circuit.(schema)

    expect(cct).must_equal %{
#<Method: #<Module:0x>.a>
 {IntermediateTest::Right} => #<Method: #<Module:0x>.b>
 {IntermediateTest::Left} => #<Method: #<Module:0x>.c>
#<Method: #<Module:0x>.b>
 {B/success} => #<Method: #<Module:0x>.d>
 {B/failure} => #<Method: #<Module:0x>.c>
#<Method: #<Module:0x>.c>
 {IntermediateTest::Right} => #<End/:failure>
 {IntermediateTest::Left} => #<End/:failure>
#<Method: #<Module:0x>.d>
 {D/success} => #<End/:success>
 {IntermediateTest::Left} => #<End/:success>
#<End/:success>

#<End/:failure>
}
    expect(schema[:outputs].inspect).must_equal %{[#<struct Trailblazer::Activity::Output signal=#<Trailblazer::Activity::End semantic=:success>, semantic=:success>, #<struct Trailblazer::Activity::Output signal=#<Trailblazer::Activity::End semantic=:failure>, semantic=:failure>]}

    # :extension API
    #   test it works with and without [bla_ext], and more than one per line
    expect(schema[:config].inspect).must_equal %{{:wrap_static=>{}, :a1=>true, :a2=>:yo, :b1=>false}}
  end

  def implementation(c_extensions)
    {
      :C => Schema::Implementation::Task(c = implementing.method(:c), [Activity::Output(Activity::Right, :success)],                  c_extensions),
      "End.success" => Schema::Implementation::Task(_es = implementing::Success, [Activity::Output(implementing::Success, :success)], [])
    }
  end

  it "start and stop can be arbitrary" do
    skip # till Dev::Introspect is available
    # D returns "D/stop" signal.
    module D
      def self.d_end((ctx, flow_options), *)
        ctx[:seq] << :d
        return "D/stop", [ctx, flow_options]
      end
    end

    intermediate =
      Inter.new(
        {
          Inter::TaskRef("Start.default")                 => [Inter::Out(:success, :C)],
          Inter::TaskRef(:C)                              => [Inter::Out(:success, :D)],
          Inter::TaskRef(:D)                              => [Inter::Out(:win,     :E)],
          Inter::TaskRef(:E)                              => [Inter::Out(:success, "End.success")],
          Inter::TaskRef("End.success", stop_event: true) => [Inter::Out(:success, nil)]
        },
        # arbitrary start and end event.
        [:D, "End.success"], # end events
        [:C] # start
      )

    implementation =
      {
        "Start.default" => Schema::Implementation::Task(implementing::Start, [Activity::Output(Activity::Right, :success)], []),
        :C => Schema::Implementation::Task(implementing.method(:c), [Activity::Output(Activity::Right, :success)], []),
        :D => Schema::Implementation::Task(D.method(:d_end),        [Activity::Output("D/stop", :win)], []),
        :E => Schema::Implementation::Task(implementing.method(:f), [Activity::Output(Activity::Right, :success)], []),
        "End.success" => Schema::Implementation::Task(implementing::Success, [Activity::Output(implementing::Success, :success)], [])
      }

    schema = Inter.(intermediate, implementation)

    expect(schema[:outputs].inspect).must_equal %{[#<struct Trailblazer::Activity::Output signal="D/stop", semantic=:win>, #<struct Trailblazer::Activity::Output signal=#<Trailblazer::Activity::End semantic=:success>, semantic=:success>]}

    assert_circuit(
      schema, %{
#<Start/:default>
 {Trailblazer::Activity::Right} => #<Method: #<Module:0x>.c>
#<Method: #<Module:0x>.c>
 {Trailblazer::Activity::Right} => #<Method: IntermediateTest::D.d_end>
#<Method: IntermediateTest::D.d_end>

#<Method: #<Module:0x>.f>
 {Trailblazer::Activity::Right} => #<End/:success>
#<End/:success>
}
    )

    signal, (ctx,) = schema[:circuit].([{seq: []}])

    expect(signal.inspect).must_equal %{"D/stop"}
    # stop at :D.
    expect(ctx.inspect).must_equal %{{:seq=>[:c, :d]}}
  end

  describe ":extension API: Config::State" do
    let(:intermediate) do
      Inter.new(
        {
          Inter::TaskRef(:C)                              => [Inter::Out(:success, "End.success")],
          Inter::TaskRef("End.success", stop_event: true) => [Inter::Out(:success, nil)]
        },
        ["End.success"],
        [:C] # start
      )
    end

    def implementation(c_extensions)
      {
        :C => Schema::Implementation::Task(c = implementing.method(:c), [Activity::Output(Activity::Right, :success)],                  c_extensions),
        "End.success" => Schema::Implementation::Task(_es = implementing::Success, [Activity::Output(implementing::Success, :success)], [])
      }
    end

    # Accessor API

    it "doesn't allow mutations" do
      ext_a = ->(config:, **) { config[:a] = "bla" }

      exception = Object.const_defined?(:FrozenError) ? FrozenError : RuntimeError # < Ruby 2.5

      assert_raises exception do
        Inter.(intermediate, implementation([ext_a]))
      end
    end

    it "allows using the {Config} API" do
      ext_a = ->(config:, **)       { Activity::State::Config.set(config, :a, "bla") }
      ext_b = ->(config:, **)       { Activity::State::Config.set(config, :b, "blubb") }
      ext_c = ->(config:, **)       { Activity::State::Config.set(config, :c, "key", "value") } # initializes {:c} with hash.
      ext_d = ->(config:, id:, **)  { Activity::State::Config.set(config, id, 1) }              # provides :id
      ext_e = ->(config:, **)       { Activity::State::Config.set(config, :e, config[:C] + 1) } # allows reading new {Config} instance.

      schema = Inter.(intermediate, implementation([ext_a, ext_b, ext_c, ext_d, ext_e]))

      expect(schema[:config].to_h.inspect).must_equal %{{:wrap_static=>{}, :a=>\"bla\", :b=>\"blubb\", :c=>{\"key\"=>\"value\"}, :C=>1, :e=>2}}
    end
  end
end
